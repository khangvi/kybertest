'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _web = require('web3');

var _web2 = _interopRequireDefault(_web);

var _KyberReserveContractAbi = require('../abi/KyberReserveContract.abi.json');

var _KyberReserveContractAbi2 = _interopRequireDefault(_KyberReserveContractAbi);

var _base_contract = require('./base_contract.js');

var _base_contract2 = _interopRequireDefault(_base_contract);

var _validate = require('./validate.js');

var _permission_assert = require('./permission_assert.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * ReserveContract contains extended methods for KyberReserveContract
 */
var ReserveContract = function (_BaseContract) {
  (0, _inherits3.default)(ReserveContract, _BaseContract);

  /**
   * Create new BaseContract instance.
   * @param {object} provider - Web3 provider
   * @param {string} address - address of kyber reserve smart contract.
   */
  function ReserveContract(web3, address) {
    (0, _classCallCheck3.default)(this, ReserveContract);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ReserveContract.__proto__ || (0, _getPrototypeOf2.default)(ReserveContract)).call(this, web3, address));

    _this.web3 = web3;
    _this.contract = new _this.web3.eth.Contract(_KyberReserveContractAbi2.default, address);
    return _this;
  }
  /**
   * enableTrade allow the reserve to continue trading
   * @param {object} adminAddress - address of Admin account
   * @param {number} gasPrice (optional) - the gasPrice desired for the tx
   * @return {object} - the tx object of send() command from this contract method
   */


  (0, _createClass3.default)(ReserveContract, [{
    key: 'enableTrade',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(adminAddress, gasPrice) {
        var med;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _permission_assert.assertAdmin)(this, adminAddress);

              case 2:
                med = this.contract.methods.enableTrade();
                _context.t0 = this.contract.methods.enableTrade();
                _context.t1 = adminAddress;
                _context.next = 7;
                return med.estimateGas({
                  from: adminAddress
                });

              case 7:
                _context.t2 = _context.sent;
                _context.t3 = gasPrice;
                _context.t4 = {
                  from: _context.t1,
                  gas: _context.t2,
                  gasPrice: _context.t3
                };
                return _context.abrupt('return', _context.t0.send.call(_context.t0, _context.t4));

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function enableTrade(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return enableTrade;
    }()

    /**
     * disableTrade stop the reserve from trading
     * @param {object} alerterAddress - address of Alerter account
     * @param {number} gasPrice (optional) - the gasPrice desired for the tx
     * @return {object} - the tx object of send() command from this contract method
     */

  }, {
    key: 'disableTrade',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(alerterAddress, gasPrice) {
        var med;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _permission_assert.assertAlerter)(this, alerterAddress);

              case 2:
                med = this.contract.methods.disableTrade();
                _context2.t0 = med;
                _context2.t1 = alerterAddress;
                _context2.next = 7;
                return med.estimateGas({
                  from: alerterAddress
                });

              case 7:
                _context2.t2 = _context2.sent;
                _context2.t3 = gasPrice;
                _context2.t4 = {
                  from: _context2.t1,
                  gas: _context2.t2,
                  gasPrice: _context2.t3
                };
                return _context2.abrupt('return', _context2.t0.send.call(_context2.t0, _context2.t4));

              case 11:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function disableTrade(_x3, _x4) {
        return _ref2.apply(this, arguments);
      }

      return disableTrade;
    }()

    /**
     * tradeEnabled return true if the reserve is tradeEnabled, false otherwise
     * @return {boolean} - tradeEnabled status of the reserve
     */

  }, {
    key: 'tradeEnabled',
    value: function tradeEnabled() {
      return this.contract.methods.tradeEnabled().call();
    }

    /**
     * set Contract addresses for reserve contract.
     * @param {object} adminAddress - address of admin account.
     * @param {string} network - address of kyber network smart contract.
     * @param {string} conversion - address of kyber network smart contract.
     * @param {string} sanity (optional) - address of sanity rates contract.
     * @param {number} [gasPrice=undefined] - the gasPrice desired for the tx
     * @returns {object} - the tx object of send() command from this contract method
     */

  }, {
    key: 'setContracts',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(adminAddress, network, conversion, sanity) {
        var gasPrice = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
        var med;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _validate.validateAddress)(network);
                (0, _validate.validateAddress)(conversion);
                _context3.next = 4;
                return (0, _permission_assert.assertAdmin)(this, adminAddress);

              case 4:
                if (sanity !== undefined) {
                  (0, _validate.validateAddress)(sanity);
                } else {
                  sanity = '0x0000000000000000000000000000000000000000';
                }

                med = this.contract.methods.setContracts(network, conversion, sanity);
                _context3.t0 = med;
                _context3.t1 = adminAddress;
                _context3.next = 10;
                return med.estimateGas({
                  from: adminAddress
                });

              case 10:
                _context3.t2 = _context3.sent;
                _context3.t3 = gasPrice;
                _context3.t4 = {
                  from: _context3.t1,
                  gas: _context3.t2,
                  gasPrice: _context3.t3
                };
                return _context3.abrupt('return', _context3.t0.send.call(_context3.t0, _context3.t4));

              case 14:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function setContracts(_x6, _x7, _x8, _x9) {
        return _ref3.apply(this, arguments);
      }

      return setContracts;
    }()

    /**
     * conversionRatesContract return the address of conversion rates of this reserve
     * @return {string} - address of conversion rates contract
     */

  }, {
    key: 'conversionRatesContract',
    value: function conversionRatesContract() {
      return this.contract.methods.conversionRatesContract().call();
    }

    /**
     * sanityRatesContract return the address of sanity rates of this reserve
     * @return {string} - address of sanity rates contract
     */

  }, {
    key: 'sanityRatesContract',
    value: function sanityRatesContract() {
      return this.contract.methods.sanityRatesContract().call();
    }

    /**
     * kyberNetwork return the address of kyberNetwork contract of this reserve
     * @return {string} - address of kyberNetwork contract
     */

  }, {
    key: 'kyberNetwork',
    value: function kyberNetwork() {
      return this.contract.methods.kyberNetwork().call();
    }

    /**
     * approve withdraw address for a token on reserve.
     * @param {object} adminAddress - address of admin account.
     * @param {string} tokenAddress - contract address of the modifying token.
     * @param {string} withdrawAddress - address for withdrawal.
     * @param {number} [gasPrice=undefined] - the gasPrice desired for the tx
     * @returns {object} - the tx object of send() command from this contract method
     */

  }, {
    key: 'approveWithdrawAddress',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(adminAddress, tokenAddress, withdrawAddress) {
        var gasPrice = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
        var med;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _permission_assert.assertAdmin)(this, adminAddress);

              case 2:
                med = this.contract.methods.approveWithdrawAddress(tokenAddress, withdrawAddress, true);
                _context4.t0 = med;
                _context4.t1 = adminAddress;
                _context4.next = 7;
                return med.estimateGas({
                  from: adminAddress
                });

              case 7:
                _context4.t2 = _context4.sent;
                _context4.t3 = gasPrice;
                _context4.t4 = {
                  from: _context4.t1,
                  gas: _context4.t2,
                  gasPrice: _context4.t3
                };
                return _context4.abrupt('return', _context4.t0.send.call(_context4.t0, _context4.t4));

              case 11:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function approveWithdrawAddress(_x11, _x12, _x13) {
        return _ref4.apply(this, arguments);
      }

      return approveWithdrawAddress;
    }()

    /**
     * disapprove withdraw address for a token on reserve.
     * @param {object} adminAddress - address of admin account.
     * @param {string} tokenAddress - contract address of the modifying token.
     * @param {string} withdrawAddress - address for withdrawal.
     * @param {number} [gasPrice=undefined] - the gasPrice desired for the tx
     * @returns {object} - the tx object of send() command from this contract method
     */

  }, {
    key: 'disapproveWithdrawAddress',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(adminAddress, tokenAddress, withdrawAddress) {
        var gasPrice = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
        var med;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _permission_assert.assertAdmin)(this, adminAddress);

              case 2:
                med = this.contract.methods.approveWithdrawAddress(tokenAddress, withdrawAddress, false);
                _context5.t0 = med;
                _context5.t1 = adminAddress;
                _context5.next = 7;
                return med.estimateGas({
                  from: adminAddress
                });

              case 7:
                _context5.t2 = _context5.sent;
                _context5.t3 = gasPrice;
                _context5.t4 = {
                  from: _context5.t1,
                  gas: _context5.t2,
                  gasPrice: _context5.t3
                };
                return _context5.abrupt('return', _context5.t0.send.call(_context5.t0, _context5.t4));

              case 11:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function disapproveWithdrawAddress(_x15, _x16, _x17) {
        return _ref5.apply(this, arguments);
      }

      return disapproveWithdrawAddress;
    }()

    /**
     * check for approval status of a token address to a particular address
     * @param {object} address - address to withdraw the token to
     * @param {string} tokenAddress - address of the token's smart contract. Must be deployed already.
     * @returns {boolean} - true for approved, false otherwise
     */

  }, {
    key: 'approvedWithdrawAddresses',
    value: function approvedWithdrawAddresses(address, tokenAddress) {
      var addressHash = _web2.default.utils.soliditySha3(tokenAddress, address);
      return this.contract.methods.approvedWithdrawAddresses(addressHash).call();
    }

    /**
     * withdraw an amount of token to specified account
     * @param {object} operatorAddress - address of operator account.
     * @param {string} tokenAddress - address of the token's smart contract. Must be deployed already.
     * @param {object} amount - amount to withdraw (BN|String|int), must be in wei.
     * @param {string} toAddress - address for withdrawal. Must be approved already.
     * @param {number} [gasPrice=undefined] - the gasPrice desired for the tx
     * @returns {object} - the tx object of send() command from this contract method
     */

  }, {
    key: 'withdraw',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(operatorAddress, tokenAddress, amount, toAddress) {
        var gasPrice = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
        var med;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _permission_assert.assertOperator)(this, operatorAddress);

              case 2:
                med = this.contract.methods.withdraw(tokenAddress, amount, toAddress);
                _context6.t0 = med;
                _context6.t1 = operatorAddress;
                _context6.next = 7;
                return med.estimateGas({
                  from: operatorAddress
                });

              case 7:
                _context6.t2 = _context6.sent;
                _context6.t3 = gasPrice;
                _context6.t4 = {
                  from: _context6.t1,
                  gas: _context6.t2,
                  gasPrice: _context6.t3
                };
                return _context6.abrupt('return', _context6.t0.send.call(_context6.t0, _context6.t4));

              case 11:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function withdraw(_x19, _x20, _x21, _x22) {
        return _ref6.apply(this, arguments);
      }

      return withdraw;
    }()

    /**
     * Return balance of given token.
     * @param {string} token - address of token to check balance.
     * @return {number} - balance of given token
     */

  }, {
    key: 'getBalance',
    value: function getBalance(token) {
      return this.contract.methods.getBalance(token).call();
    }
    /**
     * set different token wallet per token.
     * @param {object} adminAddress - address of admin account.
     * @param {string} tokenAddress - address of the token's smart contract.
     * @param {object} walletAddress - address of wallet in which tokens are present.
     */

  }, {
    key: 'setTokenWallet',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(adminAddress, tokenAddress, walletAddress) {
        var gasPrice = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
        var setWallet;
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return (0, _permission_assert.assertAdmin)(this, adminAddress);

              case 2:
                setWallet = this.contract.methods.setTokenWallet(tokenAddress, walletAddress);
                _context7.t0 = setWallet;
                _context7.t1 = adminAddress;
                _context7.next = 7;
                return setWallet.estimateGas({ from: adminAddress });

              case 7:
                _context7.t2 = _context7.sent;
                _context7.t3 = gasPrice;
                _context7.t4 = {
                  from: _context7.t1,
                  gas: _context7.t2,
                  gasPrice: _context7.t3
                };
                return _context7.abrupt('return', _context7.t0.send.call(_context7.t0, _context7.t4));

              case 11:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function setTokenWallet(_x24, _x25, _x26) {
        return _ref7.apply(this, arguments);
      }

      return setTokenWallet;
    }()
  }]);
  return ReserveContract;
}(_base_contract2.default);

exports.default = ReserveContract;