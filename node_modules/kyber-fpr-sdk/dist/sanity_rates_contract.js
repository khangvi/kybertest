'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _SanityRatesContractAbi = require('../abi/SanityRatesContract.abi.json');

var _SanityRatesContractAbi2 = _interopRequireDefault(_SanityRatesContractAbi);

var _base_contract = require('./base_contract.js');

var _base_contract2 = _interopRequireDefault(_base_contract);

var _validate = require('./validate.js');

var _web = require('web3');

var _web2 = _interopRequireDefault(_web);

var _permission_assert = require('./permission_assert.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * SanityRatesContract represents the KyberNetwork sanity rates smart contract.
 * It's purpose is to prevent unusual rates from conversion rates contract
 * to be used.
 */
var SanityRatesContract = function (_BaseContract) {
  (0, _inherits3.default)(SanityRatesContract, _BaseContract);

  /**
   * Create new SanityRatesContract instance.
   * @param {object} provider - Web3 provider
   * @param {string} address - address of smart contract.
   */
  function SanityRatesContract(web3, address) {
    (0, _classCallCheck3.default)(this, SanityRatesContract);

    var _this = (0, _possibleConstructorReturn3.default)(this, (SanityRatesContract.__proto__ || (0, _getPrototypeOf2.default)(SanityRatesContract)).call(this, web3, address));

    _this.web3 = web3;
    _this.contract = new _this.web3.eth.Contract(_SanityRatesContractAbi2.default, address);
    return _this;
  }

  /**
   * Return the sanity Rate of a pair of token
   * @param {string} src - ERC20 token contract address of source token
   * @param {string} dest - ERC20 token contract address of destination token
   * @returns {string} - the uint rate in strings format.
   */


  (0, _createClass3.default)(SanityRatesContract, [{
    key: 'getSanityRate',
    value: function getSanityRate(src, dest) {
      (0, _validate.validateAddress)(src);
      (0, _validate.validateAddress)(dest);
      return this.contract.methods.getSanityRate(src, dest).call();
    }

    /**
     * Set Sanity Rate for the contract
     * @param {object} operatorAddress - address of operator account
     * @param {string[]} srcs - list of source ERC20 token contract addresses
     * @param {uint[]} rates - list of Rates in ETH wei
     * @param {number} gasPrice (optional) - the gasPrice desired for the tx
     * @returns {object} - the tx object of send() command from this contract method
     */

  }, {
    key: 'setSanityRates',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(operatorAddress, srcs, rates, gasPrice) {
        var med;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _permission_assert.assertOperator)(this, operatorAddress);

              case 2:
                med = this.contract.methods.setSanityRates(srcs, rates);
                _context.t0 = med;
                _context.t1 = operatorAddress;
                _context.next = 7;
                return med.estimateGas({
                  from: operatorAddress
                });

              case 7:
                _context.t2 = _context.sent;
                _context.t3 = gasPrice;
                _context.t4 = {
                  from: _context.t1,
                  gas: _context.t2,
                  gasPrice: _context.t3
                };
                return _context.abrupt('return', _context.t0.send.call(_context.t0, _context.t4));

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function setSanityRates(_x, _x2, _x3, _x4) {
        return _ref.apply(this, arguments);
      }

      return setSanityRates;
    }()

    /**
     * resonableDiffInBps return the list of reasonableDiffs in basis points (bps)
     * @param {string} address - ERC20 token contract address to query
     * @returns {string} - the uint reasonable diff in string format
     */

  }, {
    key: 'reasonableDiffInBps',
    value: function reasonableDiffInBps(address) {
      (0, _validate.validateAddress)(address);
      return this.contract.methods.reasonableDiffInBps(address).call();
    }

    /**
     * setResonableDiff Set reasonable conversion rate difference in percentage (any conversion rate outside of this range is considered unreasonable).
     * @param {object} adminAddress - address of admin account
     * @param {string[]} addresses - list of ERC20 token contract to set
     * @param {uint[]} diffs - list of diffs in bps (1 bps = 0.01%)
     * @param {number} [gasPrice=undefined] - the gasPrice desired for the tx
     * @returns {object} - the tx object of send() command from this contract method
     */

  }, {
    key: 'setReasonableDiff',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(adminAddress, addresses, diffs) {
        var gasPrice = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
        var med;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _permission_assert.assertAdmin)(this, adminAddress);

              case 2:
                med = this.contract.methods.setReasonableDiff(addresses, diffs);
                _context2.t0 = med;
                _context2.t1 = adminAddress;
                _context2.next = 7;
                return med.estimateGas({
                  from: adminAddress
                });

              case 7:
                _context2.t2 = _context2.sent;
                _context2.t3 = gasPrice;
                _context2.t4 = {
                  from: _context2.t1,
                  gas: _context2.t2,
                  gasPrice: _context2.t3
                };
                return _context2.abrupt('return', _context2.t0.send.call(_context2.t0, _context2.t4));

              case 11:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function setReasonableDiff(_x6, _x7, _x8) {
        return _ref2.apply(this, arguments);
      }

      return setReasonableDiff;
    }()
  }]);
  return SanityRatesContract;
}(_base_contract2.default);

exports.default = SanityRatesContract;