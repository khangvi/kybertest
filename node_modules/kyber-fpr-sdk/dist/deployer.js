'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KyberNetworkAddress = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _web = require('web3');

var _web2 = _interopRequireDefault(_web);

var _addresses = require('./addresses.js');

var _addresses2 = _interopRequireDefault(_addresses);

var _ConversionRatesContract = require('./contracts/ConversionRatesContract.js');

var _ConversionRatesContract2 = _interopRequireDefault(_ConversionRatesContract);

var _ConversionRatesContractAbi = require('../abi/ConversionRatesContract.abi.json');

var _ConversionRatesContractAbi2 = _interopRequireDefault(_ConversionRatesContractAbi);

var _KyberReserveContractAbi = require('../abi/KyberReserveContract.abi.json');

var _KyberReserveContractAbi2 = _interopRequireDefault(_KyberReserveContractAbi);

var _KyberReserveContract = require('./contracts/KyberReserveContract.js');

var _KyberReserveContract2 = _interopRequireDefault(_KyberReserveContract);

var _SanityRatesContractAbi = require('../abi/SanityRatesContract.abi.json');

var _SanityRatesContractAbi2 = _interopRequireDefault(_SanityRatesContractAbi);

var _SanityRatesContract = require('./contracts/SanityRatesContract.js');

var _SanityRatesContract2 = _interopRequireDefault(_SanityRatesContract);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * KyberNetworkAddress is the smart contract address of KyberNetwork.</br>
 * *Last updated*: 2018, August 31
 * @type {string}
 */
var KyberNetworkAddress = exports.KyberNetworkAddress = '0x91a502C678605fbCe581eae053319747482276b9';

/**
 * Deployer is used for deploying new KyberNetwork reserve contracts.
 * It deployed all requires smart contracts for running a reserve:
 * <ul>
 *   <li>reserve</li>
 *   <li>conversionRates</li>
 *   <li>sanityRates (optional)</li>
 * </ul>
 */

var Deployer = function () {
  /**
   * Create a deployer instance with given account parameter.
   * @param {object} web3 - Web3 instance
   */
  function Deployer(web3) {
    (0, _classCallCheck3.default)(this, Deployer);

    if (web3.currentProvider == null) {
      throw new Error('web3 is not provided');
    }
    this.web3 = web3;
  }

  /**
   * Deploy new reserve and pricing contracts.
   * @param {object} adminAddress - Web3 account to create the smart contracts. This account is also set to be admin of the contracts
   * @param {string} [network] - Address of KyberNetwork smart contract.
   * @param {boolean} [sanityRates=false] - If true, sanityRates contract will be deployed.
   * @param {number} gasPrice (optional) - the gasPrice desired for the tx
   * @return {Addresses} - Deployed reserve addresses set.
   */


  (0, _createClass3.default)(Deployer, [{
    key: 'deploy',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(adminAddress, network) {
        var _this = this;

        var sanityRates = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var gasPrice = arguments[3];
        var deployContract, deployConversionRates, deployReserve, deploySanityRates, conversionRatesContract, reserveContract, sanityRatesContract, setReserveAddressForConversionRates, setReserveAddressTxResult, setContractAddressesForReserve, setContractAddressesTxResult;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (adminAddress) {
                  _context4.next = 2;
                  break;
                }

                throw new Error('missing admin address');

              case 2:
                if (network) {
                  _context4.next = 4;
                  break;
                }

                throw new Error('missing network address');

              case 4:
                deployContract = function () {
                  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(adminAddress, jsonInterface, byteCode, args) {
                    var dpl;
                    return _regenerator2.default.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            dpl = new _this.web3.eth.Contract(jsonInterface).deploy({
                              data: '0x' + byteCode,
                              arguments: args
                            });
                            _context.t0 = dpl;
                            _context.t1 = adminAddress;
                            _context.next = 5;
                            return dpl.estimateGas({
                              from: adminAddress
                            });

                          case 5:
                            _context.t2 = _context.sent;
                            _context.t3 = gasPrice;
                            _context.t4 = {
                              from: _context.t1,
                              gas: _context.t2,
                              gasPrice: _context.t3
                            };
                            return _context.abrupt('return', _context.t0.send.call(_context.t0, _context.t4));

                          case 9:
                          case 'end':
                            return _context.stop();
                        }
                      }
                    }, _callee, _this);
                  }));

                  return function deployContract(_x4, _x5, _x6, _x7) {
                    return _ref2.apply(this, arguments);
                  };
                }();

                deployConversionRates = function deployConversionRates(adminAddress) {
                  console.log('Deploying conversion ... This might take a while for the tx to be mined');
                  return deployContract(adminAddress, _ConversionRatesContractAbi2.default, _ConversionRatesContract2.default, [adminAddress]);
                };

                deployReserve = function deployReserve(adminAddress, network, conversionAddress) {
                  console.log('Deploying reserve ... This might take a while for the tx to be mined');
                  var args = [network, conversionAddress, adminAddress];
                  return deployContract(adminAddress, _KyberReserveContractAbi2.default, _KyberReserveContract2.default, args);
                };

                deploySanityRates = function deploySanityRates(adminAddress) {
                  console.log('Deploying sanity ...This might take a while for the tx to be mined');

                  return deployContract(adminAddress, _SanityRatesContractAbi2.default, _SanityRatesContract2.default, [adminAddress]);
                };

                // All the contract must be deployed sequentially


                _context4.next = 10;
                return deployConversionRates(adminAddress);

              case 10:
                conversionRatesContract = _context4.sent;
                _context4.next = 13;
                return deployReserve(adminAddress, network, conversionRatesContract.options.address);

              case 13:
                reserveContract = _context4.sent;
                sanityRatesContract = void 0;

                if (!sanityRates) {
                  _context4.next = 19;
                  break;
                }

                _context4.next = 18;
                return deploySanityRates(adminAddress);

              case 18:
                sanityRatesContract = _context4.sent;

              case 19:
                setReserveAddressForConversionRates = function () {
                  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(conversionRatesContract, reserveAddress) {
                    var setReserveAddressTx;
                    return _regenerator2.default.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            console.log('linking reserveContractAddress to conversionRateContract...');
                            _context2.next = 3;
                            return conversionRatesContract.methods.setReserveAddress(reserveAddress);

                          case 3:
                            setReserveAddressTx = _context2.sent;
                            _context2.t0 = setReserveAddressTx;
                            _context2.t1 = adminAddress;
                            _context2.next = 8;
                            return setReserveAddressTx.estimateGas({
                              from: adminAddress
                            });

                          case 8:
                            _context2.t2 = _context2.sent;
                            _context2.t3 = gasPrice;
                            _context2.t4 = {
                              from: _context2.t1,
                              gas: _context2.t2,
                              gasPrice: _context2.t3
                            };
                            return _context2.abrupt('return', _context2.t0.send.call(_context2.t0, _context2.t4));

                          case 12:
                          case 'end':
                            return _context2.stop();
                        }
                      }
                    }, _callee2, _this);
                  }));

                  return function setReserveAddressForConversionRates(_x8, _x9) {
                    return _ref3.apply(this, arguments);
                  };
                }();

                _context4.next = 22;
                return setReserveAddressForConversionRates(conversionRatesContract, reserveContract.options.address);

              case 22:
                setReserveAddressTxResult = _context4.sent;

                console.log('setReserveAddressTx: ', setReserveAddressTxResult.transactionHash);

                setContractAddressesForReserve = function () {
                  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(reserveContract, networkAddress, rateAddress, sanityAddress) {
                    var setContractsTx;
                    return _regenerator2.default.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            console.log('linking network, rate and sanity contract address to reserveContract...');
                            _context3.next = 3;
                            return reserveContract.methods.setContracts(networkAddress, rateAddress, sanityAddress);

                          case 3:
                            setContractsTx = _context3.sent;
                            _context3.t0 = setContractsTx;
                            _context3.t1 = adminAddress;
                            _context3.next = 8;
                            return setContractsTx.estimateGas({
                              from: adminAddress
                            });

                          case 8:
                            _context3.t2 = _context3.sent;
                            _context3.t3 = gasPrice;
                            _context3.t4 = {
                              from: _context3.t1,
                              gas: _context3.t2,
                              gasPrice: _context3.t3
                            };
                            return _context3.abrupt('return', _context3.t0.send.call(_context3.t0, _context3.t4));

                          case 12:
                          case 'end':
                            return _context3.stop();
                        }
                      }
                    }, _callee3, _this);
                  }));

                  return function setContractAddressesForReserve(_x10, _x11, _x12, _x13) {
                    return _ref4.apply(this, arguments);
                  };
                }();

                _context4.next = 27;
                return setContractAddressesForReserve(reserveContract, network, conversionRatesContract.options.address, !sanityRatesContract ? '0x0000000000000000000000000000000000000000' : sanityRatesContract.options.address);

              case 27:
                setContractAddressesTxResult = _context4.sent;

                console.log('setContractAddressesTx: ', setContractAddressesTxResult.transactionHash);

                return _context4.abrupt('return', new _addresses2.default(reserveContract.options.address, conversionRatesContract.options.address, !sanityRatesContract ? undefined : sanityRatesContract.options.address));

              case 30:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function deploy(_x2, _x3) {
        return _ref.apply(this, arguments);
      }

      return deploy;
    }()
  }, {
    key: 'deploySanityRates',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(adminAddress, gasPrice) {
        var _this2 = this;

        var deployContract, deploySanityRates, sanityRatesContract;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (adminAddress) {
                  _context6.next = 2;
                  break;
                }

                throw new Error('missing admin address');

              case 2:
                deployContract = function () {
                  var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(adminAddress, jsonInterface, byteCode, args) {
                    var dpl;
                    return _regenerator2.default.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            dpl = new _this2.web3.eth.Contract(jsonInterface).deploy({
                              data: '0x' + byteCode,
                              arguments: args
                            });
                            _context5.t0 = dpl;
                            _context5.t1 = adminAddress;
                            _context5.next = 5;
                            return dpl.estimateGas({
                              from: adminAddress
                            });

                          case 5:
                            _context5.t2 = _context5.sent;
                            _context5.t3 = gasPrice;
                            _context5.t4 = {
                              from: _context5.t1,
                              gas: _context5.t2,
                              gasPrice: _context5.t3
                            };
                            return _context5.abrupt('return', _context5.t0.send.call(_context5.t0, _context5.t4));

                          case 9:
                          case 'end':
                            return _context5.stop();
                        }
                      }
                    }, _callee5, _this2);
                  }));

                  return function deployContract(_x16, _x17, _x18, _x19) {
                    return _ref6.apply(this, arguments);
                  };
                }();

                deploySanityRates = function deploySanityRates(adminAddress) {
                  console.log('Deploying sanity ...This might take a while for the tx to be mined');

                  return deployContract(adminAddress, _SanityRatesContractAbi2.default, _SanityRatesContract2.default, [adminAddress]);
                };

                _context6.next = 6;
                return deploySanityRates(adminAddress);

              case 6:
                sanityRatesContract = _context6.sent;
                return _context6.abrupt('return', sanityRatesContract.options.address);

              case 8:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function deploySanityRates(_x14, _x15) {
        return _ref5.apply(this, arguments);
      }

      return deploySanityRates;
    }()
  }]);
  return Deployer;
}();

exports.default = Deployer;