'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _web = require('web3');

var _web2 = _interopRequireDefault(_web);

var _base_contract_abi = require('../abi/base_contract_abi.json');

var _base_contract_abi2 = _interopRequireDefault(_base_contract_abi);

var _validate = require('./validate.js');

var _permission_assert = require('./permission_assert.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * BaseContract contains common methods for all contracts of a KyberNetwork
 * reserve.
 */
var BaseContract = function () {
  /**
   * Create new BaseContract instance.
   * @param {object} web3 - Web3 instance
   * @param {string} address - address of smart contract.
   */
  function BaseContract(web3, address) {
    (0, _classCallCheck3.default)(this, BaseContract);

    if (!web3) {
      throw new Error('missing web3 instance');
    }

    if (web3.currentProvider == null) {
      throw new Error('web3 instance has no provider');
    }

    (0, _validate.validateAddress)(address);

    this.web3 = web3;
    this.contract = new web3.eth.Contract(_base_contract_abi2.default, address);
  }

  /**
   * Return the current admin address of contract.
   * @return {string} - current admin address
   */


  (0, _createClass3.default)(BaseContract, [{
    key: 'admin',
    value: function admin() {
      return this.contract.methods.admin().call();
    }

    /**
     * Return the pending admin address of contract.
     * An admin address is placed in pending if it is transfered but hasn't been
     * claimed yet.
     * @return {string} - pending admin address
     */

  }, {
    key: 'pendingAdmin',
    value: function pendingAdmin() {
      return this.contract.methods.pendingAdmin().call();
    }

    /**
     * transfer admin privilege to given address.
     * @param {object} adminAddress - current admin account
     * @param {string} address - new admin address
     * @param {number} gasPrice (optional) - the gasPrice desired for the tx
     */

  }, {
    key: 'transferAdmin',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(adminAddress, address, gasPrice) {
        var med;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                (0, _validate.validateAddress)(address);
                _context.next = 3;
                return (0, _permission_assert.assertAdmin)(this, adminAddress);

              case 3:
                med = this.contract.methods.transferAdmin(address);
                _context.t0 = med;
                _context.t1 = adminAddress;
                _context.next = 8;
                return med.estimateGas({
                  from: adminAddress,
                  gasPrice: gasPrice
                });

              case 8:
                _context.t2 = _context.sent;
                _context.t3 = {
                  from: _context.t1,
                  gas: _context.t2
                };
                return _context.abrupt('return', _context.t0.send.call(_context.t0, _context.t3));

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function transferAdmin(_x, _x2, _x3) {
        return _ref.apply(this, arguments);
      }

      return transferAdmin;
    }()

    /**
     * Claim admin privilege. The account address should be in already placed
     * in pendingAdmin for this to works.
     * @param {object} newAccount - the pending admin account
     * @param {number} gasPrice (optional) - the gasPrice desired for the tx
     */

  }, {
    key: 'claimAdmin',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(newAccount, gasPrice) {
        var med;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                med = this.contract.methods.claimAdmin();
                _context2.t0 = med;
                _context2.t1 = newAccount;
                _context2.next = 5;
                return med.estimateGas({
                  from: newAccount,
                  gasPrice: gasPrice
                });

              case 5:
                _context2.t2 = _context2.sent;
                _context2.t3 = {
                  from: _context2.t1,
                  gas: _context2.t2
                };
                return _context2.abrupt('return', _context2.t0.send.call(_context2.t0, _context2.t3));

              case 8:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function claimAdmin(_x4, _x5) {
        return _ref2.apply(this, arguments);
      }

      return claimAdmin;
    }()

    /**
     * Return operator addresses of contract.
     * @return {array} - list of operator addresses
     */

  }, {
    key: 'getOperators',
    value: function getOperators() {
      return this.contract.methods.getOperators().call();
    }

    /**
     * Add given address from operators list.
     * @param {object} adminAddress - current admin account
     * @param {string} address - address to remove from operators list.
     * @param {number} gasPrice (optional) - the gasPrice desired for the tx
     */

  }, {
    key: 'addOperator',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(adminAddress, address, gasPrice) {
        var med;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _validate.validateAddress)(address);
                _context3.next = 3;
                return (0, _permission_assert.assertAdmin)(this, adminAddress);

              case 3:
                med = this.contract.methods.addOperator(address);
                _context3.t0 = med;
                _context3.t1 = adminAddress;
                _context3.next = 8;
                return med.estimateGas({
                  from: adminAddress,
                  gasPrice: gasPrice
                });

              case 8:
                _context3.t2 = _context3.sent;
                _context3.t3 = {
                  from: _context3.t1,
                  gas: _context3.t2
                };
                return _context3.abrupt('return', _context3.t0.send.call(_context3.t0, _context3.t3));

              case 11:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function addOperator(_x6, _x7, _x8) {
        return _ref3.apply(this, arguments);
      }

      return addOperator;
    }()

    /**
     * Remove given address from operators list.
     * @param {object} adminAddress - current admin account
     * @param {string} address - address to remove from operators list.
     * @param {number} gasPrice (optional) - the gasPrice desired for the tx
     */

  }, {
    key: 'removeOperator',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(adminAddress, address, gasPrice) {
        var med;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _validate.validateAddress)(address);
                _context4.next = 3;
                return (0, _permission_assert.assertAdmin)(this, adminAddress);

              case 3:
                med = this.contract.methods.removeOperator(address);
                _context4.t0 = med;
                _context4.t1 = adminAddress;
                _context4.next = 8;
                return med.estimateGas({
                  from: adminAddress,
                  gasPrice: gasPrice
                });

              case 8:
                _context4.t2 = _context4.sent;
                _context4.t3 = {
                  from: _context4.t1,
                  gas: _context4.t2
                };
                return _context4.abrupt('return', _context4.t0.send.call(_context4.t0, _context4.t3));

              case 11:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function removeOperator(_x9, _x10, _x11) {
        return _ref4.apply(this, arguments);
      }

      return removeOperator;
    }()

    /**
     * Return alerter addresses of contract.
     * @return {array} - list of alerter addresses
     */

  }, {
    key: 'getAlerters',
    value: function getAlerters() {
      return this.contract.methods.getAlerters().call();
    }

    /**
     * Add new address to alerters list.
     * @param {object} adminAddress - current admin account
     * @param {string} address - address to add to alerters list.
     * @param {number} gasPrice (string) - the gasPrice desired for the tx
     */

  }, {
    key: 'addAlerter',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(adminAddress, address, gasPrice) {
        var med;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _validate.validateAddress)(address);
                _context5.next = 3;
                return (0, _permission_assert.assertAdmin)(this, adminAddress);

              case 3:
                med = this.contract.methods.addAlerter(address);
                _context5.t0 = med;
                _context5.t1 = adminAddress;
                _context5.next = 8;
                return med.estimateGas({
                  from: adminAddress,
                  gasPrice: gasPrice
                });

              case 8:
                _context5.t2 = _context5.sent;
                _context5.t3 = {
                  from: _context5.t1,
                  gas: _context5.t2
                };
                return _context5.abrupt('return', _context5.t0.send.call(_context5.t0, _context5.t3));

              case 11:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function addAlerter(_x12, _x13, _x14) {
        return _ref5.apply(this, arguments);
      }

      return addAlerter;
    }()

    /**
     * Remove address from alerters list.
     * @param {object} adminAddress - current admin account
     * @param {string} address - address to remove from alerters list.
     * @param {number} gasPrice (string) - the gasPrice desired for the tx
     */

  }, {
    key: 'removeAlerter',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(adminAddress, address, gasPrice) {
        var med;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                (0, _validate.validateAddress)(address);
                _context6.next = 3;
                return (0, _permission_assert.assertAdmin)(this, adminAddress);

              case 3:
                med = this.contract.methods.removeAlerter(address);
                _context6.t0 = med;
                _context6.t1 = adminAddress;
                _context6.next = 8;
                return med.estimateGas({
                  from: adminAddress,
                  gasPrice: gasPrice
                });

              case 8:
                _context6.t2 = _context6.sent;
                _context6.t3 = {
                  from: _context6.t1,
                  gas: _context6.t2
                };
                return _context6.abrupt('return', _context6.t0.send.call(_context6.t0, _context6.t3));

              case 11:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function removeAlerter(_x15, _x16, _x17) {
        return _ref6.apply(this, arguments);
      }

      return removeAlerter;
    }()
  }]);
  return BaseContract;
}();

exports.default = BaseContract;