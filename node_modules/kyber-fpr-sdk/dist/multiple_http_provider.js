"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _web = require("web3");

var _web2 = _interopRequireDefault(_web);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MultiHttpProvider = function () {
    // it's require to have at least one provider, the first one in list will be the main provider
    // which will be use for all request, for eth_sendRawTransaction request, it we use all providers
    // to broadcast tx
    function MultiHttpProvider(providers, cb) {
        (0, _classCallCheck3.default)(this, MultiHttpProvider);

        if (!providers || providers.length === 0) {
            throw new Error("it's require at least one providers");
        }
        this._providers = providers;
        this._cb = cb;
    }

    (0, _createClass3.default)(MultiHttpProvider, [{
        key: "prepareRequest",
        value: function prepareRequest(_async) {
            var request = _web2.default.providers.HttpProvider.prototype.prepareRequest.call(this._providers[0], _async);
            return request;
        }
    }, {
        key: "send",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(payload, cb) {
                var allPromises, userResults, mainResult, i, r;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!(this._providers.length === 1 || payload.method !== "eth_sendRawTransaction")) {
                                    _context.next = 2;
                                    break;
                                }

                                return _context.abrupt("return", _web2.default.providers.HttpProvider.prototype.send.call(this._providers[0], payload, cb));

                            case 2:
                                allPromises = [];

                                this._providers.map(function (e) {
                                    var p = new _promise2.default(function (resolve, reject) {
                                        _web2.default.providers.HttpProvider.prototype.send.call(e, payload, function (err, res) {
                                            if (err) {
                                                reject(err);
                                            } else {
                                                resolve(res);
                                            }
                                        });
                                    });
                                    allPromises.push(p);
                                });
                                userResults = [];
                                i = 0;

                            case 6:
                                if (!(i < allPromises.length)) {
                                    _context.next = 21;
                                    break;
                                }

                                _context.prev = 7;
                                _context.next = 10;
                                return allPromises[i];

                            case 10:
                                r = _context.sent;

                                if (r.error) {
                                    userResults.push({ "error": r.error.message, "success": false, "provider": this._providers[i].host });
                                    if (i == 0) {
                                        mainResult = { err: r.error };
                                    }
                                } else {
                                    userResults.push({ "success": true, "provider": this._providers[i].host });
                                    if (i == 0) {
                                        mainResult = { res: r };
                                    }
                                }
                                _context.next = 18;
                                break;

                            case 14:
                                _context.prev = 14;
                                _context.t0 = _context["catch"](7);

                                userResults.push({ "error": _context.t0, "success": false, "provider": this._providers[i].host });
                                if (i == 0) {
                                    mainResult = { err: _context.t0 };
                                }

                            case 18:
                                i++;
                                _context.next = 6;
                                break;

                            case 21:
                                if (mainResult.res) {
                                    cb(null, mainResult.res);
                                } else {
                                    cb(mainResult.err, null);
                                }
                                if (this._cb) {
                                    this._cb(userResults);
                                }
                                return _context.abrupt("return", undefined);

                            case 24:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[7, 14]]);
            }));

            function send(_x, _x2) {
                return _ref.apply(this, arguments);
            }

            return send;
        }()
    }]);
    return MultiHttpProvider;
}();

exports.default = MultiHttpProvider;