"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertAdmin = exports.assertAlerter = exports.assertOperator = undefined;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assertOperator = exports.assertOperator = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(contract, address) {
    var operators, idx;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return contract.getOperators();

          case 2:
            operators = _context.sent;
            _context.t0 = _regenerator2.default.keys(operators);

          case 4:
            if ((_context.t1 = _context.t0()).done) {
              _context.next = 11;
              break;
            }

            idx = _context.t1.value;

            if (!operators.hasOwnProperty(idx)) {
              _context.next = 9;
              break;
            }

            if (!(operators[idx].toLowerCase() === address.toLowerCase())) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("return");

          case 9:
            _context.next = 4;
            break;

          case 11:
            throw new Error("not operator address: '" + address + "'");

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function assertOperator(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var assertAlerter = exports.assertAlerter = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(contract, address) {
    var alerters, idx;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return contract.getAlerters();

          case 2:
            alerters = _context2.sent;
            _context2.t0 = _regenerator2.default.keys(alerters);

          case 4:
            if ((_context2.t1 = _context2.t0()).done) {
              _context2.next = 11;
              break;
            }

            idx = _context2.t1.value;

            if (!alerters.hasOwnProperty(idx)) {
              _context2.next = 9;
              break;
            }

            if (!(alerters[idx].toLowerCase() === address.toLowerCase())) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt("return");

          case 9:
            _context2.next = 4;
            break;

          case 11:
            throw new Error("not alerter address: '" + address + "'");

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function assertAlerter(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var assertAdmin = exports.assertAdmin = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(contract, address) {
    var admin;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return contract.admin();

          case 2:
            admin = _context3.sent;

            if (!(admin.toLowerCase() !== address.toLowerCase())) {
              _context3.next = 5;
              break;
            }

            throw new Error("not alerter address address: '" + address + "'");

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function assertAdmin(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();